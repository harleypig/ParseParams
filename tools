#!/bin/bash

#----------------------------------------------------------------------------
: << POD
=head2 warn

Usage: warn "message"

C<warn> will print whatever is sent to it to STDERR.

Equivalent to C<echo 'Message' E<gt>&2>

=cut
POD

warn() { printf '%s\n' "$*" >&2; }

#----------------------------------------------------------------------------
: << POD
=head2 die

Usage: die "message"
       die 2 "message"
       someprog || die "message"

C<die> will call C<warn> with "message" and then C<exit 1>.

C<die> returns the most recent return code unless you provide a status code as
the second parameter.

=cut
POD

die() {
  # Grab most recent return code
  local rc=$?
  local int_rx='[[:digit:]]+'

  if [[ $1 =~ ^$int_rx$ ]]; then
    rc=$1
    shift
  fi

  (($#)) && warn "$*"
  exit "${rc:-1}"
}

#----------------------------------------------------------------------------
: << POD
=head2 verbose

Usage: verbose "message"

C<verbose> will check if the environment variable C<VERBOSE> is true, and if not,
silently return with a 0 return code.

Otherwise, C<verbose> will C<warn> the message passed in.

Example:

  verbose 'message to display if VERBOSE=1'

=cut
POD

verbose() { ((VERBOSE)) && warn "$*"; }

#----------------------------------------------------------------------------
: << POD
=head2 sourced

Usage: sourced || die "Must be sourced."

Returns true (0) or false (1) depending on if we have been sourced.

=cut
POD

sourced() { [[ ${FUNCNAME[1]} == 'source' ]]; }

#----------------------------------------------------------------------------
: << POD
=head2 debug

Usage: debug "message"

C<debug> will check if the environment variable C<DEBUG> is true, and if not,
silently return with a 0 return code.

Otherwise, C<debug> will determine the function call stack and C<warn> the
"message" with the stack at the beginning of the line.

Example:

  [somefunc(3):func(99)]: message

=cut
POD

debug() {
  ((DEBUG)) || return 0

  msg="$*"
  (($#)) || { read -rst 1 msg; }

  local lineno func file trace
  local -a el
  local -i lvl=0

  local interactive='I'
  [[ $- == *i* ]] || interactive='i'

  local loginshell='L'
  shopt -q login_shell || loginshell='l'

  local ignore_bats_rx='bats-exec-test|bats\.[0-9]+\.src'

  while true; do
    caller=$(caller $lvl) || break
    # In some instances, ((lvl++)) is causing errors, so do it old school.
    #((lvl++))
    lvl+=1

    read -r lineno func file <<< "$caller"

    # Ignore bats
    [[ $file =~ $ignore_bats_rx ]] && continue

    file="$(basename "$file"):"
    func+=':'

    [[ $func =~ main:|source: ]] && func=

    prefix=$(printf '[%s%s%03d]' "$file" "$func" "$lineno")
    el+=("$prefix")
  done

  for ((ix = ${#el[@]} - 1; ix >= 0; ix--)); do
    trace+="${el[ix]}"
  done

  printf '[%s%s]%s %s\n' "$interactive" "$loginshell" "$trace" "$msg" >&2
}

#----------------------------------------------------------------------------
# Force a true value on end, so 'source tool || exit 1' will work more reliably.

true
