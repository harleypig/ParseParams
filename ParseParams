#!/bin/bash

# XXX: support choosing to use --alternative or not
# XXX: add option to invert boolean (defaults to 0 instead of 1)

#source utility
source ./tools
sourced || die 'ParseParams must only be sourced'

#############################################################################
# Sanity checks

#----------------------------------------------------------------------------
# Check version of getopt.

# Wrapping this in a function allows us to test this with bats.

verify_getopt() {
  getopt -T &> /dev/null
  [[ $? -eq 4 ]] || die 1 "Unsupported version of getopt!"
}

# Why is this killing tests?!
#verify_getopt

#----------------------------------------------------------------------------
# Turn on extended globbing
shopt -s extglob

#############################################################################
# Documentation

: << POD
=head1 NAME

ParseParams - Parse command line or function parameters.

=head1 SYNOPSIS

  source ParseParams

  PARM_DEF='
  a|app,string,AppName,,required
  b|bank,number,BankNumber
  c,boolean
  '
  parse_params "$PARM_DEF" "$@"

=head1 OPTIONS

There are no options for sourcing the library itself. For the C<parse_params>
function, the following describes the required input.

The first parameter is the parameter definition string, described below.

The remaining parameters are the input parameters to be validated.

=head1 DESCRIPTION

The ParseParams library takes a definition string and parses input with
getopt, then validates that input against defined functions. It will then set
the defined variables to the input values.

Any unhandled parameters are put in the REMAINDER array.

=head1 DEFINITION STRING

A definition string is made up of five (5) fields, separated by commas.

B<OPTION,TYPE,VARNAME,DEFAULT,PARMTYPE>

Example:

C<a|appname,string,appname,myapp,optional>

C<#,char>

=head3 OPTION

B<OPTION> is a required field.

B<OPTION> can define a short option--a dash (-) followed by a single character,
a long option--a double dash (--) followed by a string, or a short option and
a long option separated by a pipe (|).

A minimal definition string can be C<appname>. This would allow your program to
accept C<--appname somestring>  as a parameter.  ParseParams would set the
variable C<appname> to C<somestring>.

C<appname> is the equivalent of C<appname,string,appname,,optional>.

B<OPTION> can also contain a single hash--'#'--which defines a positional
parameter. The first non-option parameter will be assigned to the first
variable, the second non-option paramater to the second positional variable
and so on.

=head4 NOTE

It is possible to use the same variable name for multiple definition lines.
The last parameter on the command line will be the one used as the value.

=head3 TYPE

C<TYPE> is optional and defines what is acceptable as that parameter value
(see L<TYPES> below).

=head3 VARNAME

B<VARNAME> is optional and will default to the last option defined. E.g., the
definition line C<appname> will create a variable C<appname>. A definition
line C<appname|a> will create a vriable C<a>.

=head3 DEFAULT

B<DEFAULT> is optional.

IF B<DEFAULT> is set and the parameter is not used on the command line,
B<VARNAME> will be set to the matching input parameter. Otherwise B<VARNAME>
will be set to C<NULL>.

B<DEFAULT> values are checked against the defined type and will cause parsing
to fail if they don't pass the type check.

B<DEFAULT> is ignored for C<boolean> types.

=head3 PARMTYPE

B<PARMTYPE> is optional and will default to C<optional>.

B<PARMTYPE> can be one of C<switch>, C<optional>, or C<required>.

C<switch> will define a parameter that accepts no input. E.g., C<--debug> or
C<--verbose> would be switch parm types.

C<optional> will define a parameter that requires a value but is not itself
a required parameter.

C<required> will define a paramater that requires a value and is itself
a required parameter.

=head1 TYPES

=over

=item boolean

This creates a switch parameter. The variable is set to 1 if it is not passed
on the command line, otherwise it is set to 0.

C<PARMTYPE> is forced to B<OPTIONAL> if C<TYPE> is B<boolean>.

=item string

This just checks for a non-empty value.

=item char

Requires a single character for the value.

=item integer

Requires the value be a positive integer.

=back

=head2

You can add your own type checking by adding a function or application name to
the TYPES array.

  mycheck() { true; }

  source ParseParams

  TYPES['mytype']='mycheck'

  parse_params "definition string" "parameters"

C<mycheck> must return 0 for a passing check, or a 1 for a failed check. Any
output is ignored.

=cut
POD

#############################################################################
# Globals

# The character to be used for a position definition. This should be
# a 1 character length string.
declare POS_DEF='#' # If you change this make sure you update the documentation!

declare DEFAULTS SHORTOPTS LONGOPTS DEF_LINES REQUIRED_CHECKS
# REMAINDER is used in the EVAL_STRING
# shellcheck disable=SC2034
declare -a POS_LINES REMAINDER
declare -A TYPES

declare nl=$'\n'

# Boolean types are handled as a special case.

TYPES['boolean']=''

# These functions are defined in the utility library loaded at the top of this
# script.

TYPES['string']='is_string'
TYPES['char']='is_char'
TYPES['integer']='is_integer'

#############################################################################
# Main function

: << POD
=head1 FUNCTIONS

=head2 parse_params

Expects the first parameter to be a format string that defines options and
types so that parameters can be validated, to a minimal degree. The developer
can validate parameters for their specific needs.

=cut
POD

# Expects a definition string to be passed as a single parameter.

parse_params() {
  [[ $# -eq 0 ]] && die 'No definitions were passed to parse_params.'

  debug "Normalizing definitions ..."
  _normalize_definitions "$1"
  shift

  debug "Building eval string ..."
  eval "$(_build_eval_string)"

  debug "Running _parse_params ..."
  _parse_params "$@" || {
    warn "Problems parsing parameters."
    return 1
  }

  return 0
}

#############################################################################
: << POD
=head1 INTERNAL FUNCTIONS

These functions should not be called unless you know exactly what you are
doing.

=cut
POD

#----------------------------------------------------------------------------
: << POD
=head2 _valid_varname

=over

=item usage: _valid_varname 'varname'

=back

Checks if varname is a valid variable name. Returns 0 if it is, 1 if it's not.

A valid variable name starts with an underscore or an alpha character. The
remaining characters can be an underscore or alphanumeric characters.

=cut
POD

_valid_varname() {
  # If varname is a single character then it can't be an underscore '_'.
  [[ $1 == [A-Za-z] ]] && return 0
  [[ $1 == [A-Za-z_][A-Za-z0-9_]* ]] && return 0
  return 1
}

#----------------------------------------------------------------------------
: << POD
=head2 _badopt

Takes an error string from getopt and prints a better error message.

=cut
POD

# ARGS: getopt: option '-I0Xz3dAGs' requires an argument
# ARGS: getopt: unrecognized option '-MkwTaknXI'

_badopt() {
  local badopt="$*"

  local -a work
  IFS=$'\'' read -ra work <<< "$badopt"

  local badarg
  badarg="${work[1]}"

  local opt junk
  # shellcheck disable=SC2034
  IFS=',' read -r opt junk < <(echo "$DEF_LINES" | grep -- "$badarg")

  if [[ $badopt == *'requires an argument'* ]]; then
    die "'$opt' requires a value."

  elif [[ $badopt == *'doesn'\''t allow an argument'* ]]; then
    die "'$opt' is a switch and does not accept parameters."

  elif [[ $badopt == *'unrecognized option'* ]]; then
    die "'$badarg' is an unknown option."

  else
    die "Unexpected error from getopt: $badopt"
  fi
}

#----------------------------------------------------------------------------
: << POD
=head2 _check_type

=over

=item usage: _check_type typename variablename || die 'invalid type'

=back

Checks the value of a variable with the type check in the TYPES array.

=cut
POD

# XXX: Should we be returning > 1 instead of dying here?

_check_type() {
  [[ $# -eq 2 ]] || die 'must pass type name and value to _check_type'
  [[ -z $1 ]] && die 'cannot pass empty type to _check_type'

  local -l type="$1"
  local variable="$2"

  debug "type: $type"
  debug "variable: $variable"

  [[ $type == 'boolean' ]] && die "Invalid type ($type is handled differently)"

  # This fails if $type doesn't exist or is null (TYPES[$type]=) or empty
  # (TYPES[$type]='').

  [[ -n ${TYPES[$type]} || -z ${TYPES[$type]-foo} ]] \
    || die "Invalid type ($type), it must exist and not be null or empty"

  local func="${TYPES[$type]}"

  is_executable "$func" \
    || die "$func does not appear to be a command or function"

  # We *want* the output of the $(call) to be executed!
  debug "$func ${variable}"
  # shellcheck disable=SC2091
  $("$func" "$variable")
}

#----------------------------------------------------------------------------
: << POD
=head2 _normalize_definitions

Normalizes the various ways a definition string can be defined into
a stricter, normalized string for use in C<_build_eval_string> below.

=cut
POD

# Expects a definition string to be passed as a single parameter.

# Sets DEF_LINES and POS_LINES (if any are included) to normalized definition
# lines.

# Sets SHORTOPTS and LONGOPTS to required values.

_normalize_definitions() {
  [[ -z $1 ]] && die 'No definitions were passed to _normalize_definitions.'

  local OPTION VARNAME DEFAULT
  local -l TYPE PARMTYPE

  IFS=$nl readarray -t def_lines <<< "$1"

  for BPI_IX in "${!def_lines[@]}"; do
    [[ -z ${def_lines[BPI_IX]} ]] && continue

    local -a NEW_OPTIONS=()
    local line="${def_lines[BPI_IX]}"
    local errline="on definition line $BPI_IX ($line)"

    # The definition line is separated by commas
    IFS=', ' read -r OPTION TYPE VARNAME DEFAULT PARMTYPE <<< "$line"

    debug "OPTION: $OPTION"
    debug "TYPE: $TYPE"
    debug "VARNAME: $VARNAME"
    debug "DEFAULT: $DEFAULT"
    debug "PARMTYPE: $PARMTYPE"

    #------------------------------------------------------------------------
    # Default to string if not included
    [[ -z $TYPE ]] && TYPE='string'

    [[ -n ${TYPES[$TYPE]} || -z ${TYPES[$TYPE]-foo} ]] \
      || die "Invalid type ($TYPE) $errline."

    [[ $TYPE == 'boolean' ]] && PARMTYPE='switch'

    # XXX: Should we be checking if the type function is valid at this point?

    #----------------------------------------------------------------------
    # PARMTYPE can be 'switch', 'optional', or 'required'
    #.
    # switch: parameter that doesn't accept a value.  defined as 's' or
    # 'longopt'
    #.
    # optional: parameter that accepts a value, but isn't required by the
    # calling program.
    #
    # defined as 's:' or 'longopt:' this consumes the next value regardless if
    # it starts with a dash.
    #.
    # required: parameter that accepts a value, and is required by the calling
    # program.
    #
    # defined as 's:' or 'longopt:' this consumes the next value regardless if
    # it starts with a dash.
    #.
    # ???: The double colon ('::') definition for getopt requires the value be
    # immediately after the parameter (for a shortopt) or followed immediately
    # by and equals sign ('=', for a longopt). I'm not sure how I would handle
    # this, and I don't normally use this.  So, it's going to stay unhandled
    # until I need it.

    [[ -z $PARMTYPE ]] && PARMTYPE='optional'

    [[ $PARMTYPE =~ switch|optional|required ]] \
      || die "Only 'switch', 'optional', 'required' or null is valid $errline."

    local PARMTYPE_CHAR=':'
    [[ $PARMTYPE == 'switch' ]] && PARMTYPE_CHAR=

    #------------------------------------------------------------------------
    [[ $OPTION == *$POS_DEF* && $OPTION == *'|'* ]] \
      && die "'$POS_DEF' must be the only option $errline."

    if [[ $OPTION == "$POS_DEF" ]]; then
      [[ -z $VARNAME ]] && die "Variable name is required when using position $errline."
      POS_LINES+=("$TYPE,$VARNAME")

    else
      # The options can have one or more choices
      IFS='|' read -ra OPTIONS <<< "$OPTION"

      # Default variable name to last option if not included.
      [[ -z $VARNAME ]] && VARNAME="${OPTIONS[-1]}"

      _valid_varname "$VARNAME" \
        || die "Invalid variable name ($VARNAME) $errline."

      #----------------------------------------------------------------------
      for opt in "${OPTIONS[@]}"; do
        if [[ $opt =~ ^[[:alnum:]]$ ]]; then
          [[ $SHORTOPTS == *"$opt"* ]] && die "Repeated short option ($opt) $errline."
          SHORTOPTS+="$opt$PARMTYPE_CHAR"
          NEW_OPTIONS+=("-$opt")

        elif [[ $opt =~ ^[[:alnum:]]+$ ]]; then
          [[ $LONGOPTS == *"$opt"* ]] && die "Repeated long option ($opt) $errline."
          LONGOPTS+="$opt$PARMTYPE_CHAR,"
          NEW_OPTIONS+=("--$opt")

        else
          die "Invalid option ($opt) $errline."
        fi
      done

      #----------------------------------------------------------------------
      local NEW_OPTION=
      NEW_OPTION="$(join_array ' | ' 'NEW_OPTIONS')"

      [[ $PARMTYPE == 'required' ]] \
        && REQUIRED_CHECKS+="[[ -n \$$VARNAME ]] || { warn '$NEW_OPTION is required.'; ((ERR++)); }$nl"

      #----------------------------------------------------------------------
      DEF_LINES+=$(printf '%s,' "$NEW_OPTION" "$TYPE" "$VARNAME")
      DEF_LINES="${DEF_LINES%%,}"
      DEF_LINES+=$nl
    fi

    #------------------------------------------------------------------------
    # If a default value is provided, does it pass the type check?
    if [[ -n $DEFAULT ]] && [[ $TYPE != 'boolena' ]]; then
      _check_type "$TYPE" "$DEFAULT" \
        || die "default value ($DEFAULT) does not pass type check $errline."

      if [[ $TYPE == 'integer' ]]; then
        DEFAULTS+="$VARNAME=$DEFAULT$nl"
      else
        DEFAULTS+="$VARNAME='$DEFAULT'$nl"
      fi
    fi

    [[ $TYPE == 'boolean' ]] && DEFAULTS+="$VARNAME=1$nl"
  done

  # Get rid of trailing ','
  LONGOPTS="${LONGOPTS%%,}"

  debug "DEF_LINES: $DEF_LINES <"
  debug "POS_LINES: ${POS_LINES[*]} <"
  debug "DEFAULTS: $DEFAULTS <"
  debug "REQUIRED_CHECKS: $REQUIRED_CHECKS <"
  debug "$(printf 'SHORTOPTS: %-15s <' "$SHORTOPTS")"
  debug "$(printf 'LONGOPTS: %-15s <' "$LONGOPTS")"

  return 0
}

#----------------------------------------------------------------------------
: << POD
=head2 _build_eval_string

Builds a string that will be eval'd and defines the C<_parse_params> function
based on the definition lines passed to C<parse_params>.

=head2 _parse_params

This is a dynamic function, built on the fly as a string and eval'd and then
called in C<parse_params>.

=cut
POD

_build_eval_string() {
  if [[ -z $DEF_LINES ]] && [[ ${#POS_LINES[@]} -eq 0 ]]; then
    die "Either DEF_LINES or POS_LINES needs to be set."
  fi

  local CASE_CHECKS DEFAULT OPTION VARNAME
  local -l TYPE

  IFS=$nl readarray -t def_lines <<< "$DEF_LINES"

  for BES_IX in "${!def_lines[@]}"; do
    [[ -z ${def_lines[BES_IX]} ]] && continue

    debug "line $BES_IX: $(printf '%s' "${def_lines[BES_IX]}")"

    IFS=',' read -r OPTION TYPE VARNAME <<< "${def_lines[BES_IX]}"

    CASE_CHECKS+="$OPTION)${nl}debug \"Found $OPTION (\$1 \$2)\"$nl"

    if [[ $TYPE == 'boolean' ]]; then
      CASE_CHECKS+="$VARNAME=0${nl}shift$nl"
    else
      CASE_CHECKS+="$VARNAME=\"\$2\"${nl}shift 2$nl"
      CASE_CHECKS+="_check_type '$TYPE' \"\$$VARNAME\" || { warn \"$OPTION '\$$VARNAME' is not a $TYPE.\"; ((ERR++)); }$nl"
    fi

    CASE_CHECKS+=";;$nl$nl"
  done

  local POS_CHECKS="*) : ;;"

  if [[ ${#POS_LINES[@]} -gt 0 ]]; then
    POS_CHECKS="*)
        IFS=',' read -r TYPE VARNAME <<< \"\${POS_LINES[ARGS_IX]}\"
        IFS= read -r \"\$VARNAME\" <<< \"\$1\"
        shift
        _check_type \"\$TYPE\" \"\$VARNAME\" || { warn \"'\${!VARNAME}' (position \$ARGS_IX) is not a \$TYPE.\"; ((ERR++)); }
        ;;"
  fi

  local gopts=

  # See BUGS section of getopt manpage. --options is required, even if it's ''.
  gopts+=" --options '$SHORTOPTS'"
  [[ -n $LONGOPTS ]] && gopts+=" --alternative --longoptions '$LONGOPTS'"

  [[ -n $DEFAULTS ]] && DEFAULTS="$nl# -- Begin defaults --${nl}debug 'Setting defaults ...'$nl$DEFAULTS# -- End defaults --$nl$nl"
  [[ -n $REQUIRED_CHECKS ]] && REQUIRED_CHECKS="#-- Begin required checks --${nl}debug 'Checking for required options ...'$nl$REQUIRED_CHECKS#-- End required checks --$nl$nl"

  local EVAL_STRING="_parse_params() {
  ((\$#)) || die 'no parms to check'
$DEFAULTS
  [[ \"\$*\" == '' ]] && return 0

  debug \"getopt $gopts --\"
  debug \"@: \$*\"

  local -i rc=0
  local ARGS

  ARGS=\"\$(getopt $gopts -- \"\$@\" 2>&1)\" || {
    rc=\$?
    ((rc==4)) && die \"Don't call getopt with '-T'.\"
    ((rc==3)) && die \"getopt internal error.\"
    ((rc==2)) && die \"Unrecognized parameters used with getopt.\"
  }

  debug \"rc: \$rc\"
  debug \"ARGS: \$ARGS <\"
  ((rc)) && _badopt \"\$ARGS\"

  eval set -- \"\$ARGS\"

  local ERR=0
  local ARGS_IX=0

  while ((\$#)); do
    debug \"1: '\$1' (\$#)\"

    case \"\$1\" in
$CASE_CHECKS--)
        shift
        break
        ;;

      $POS_CHECKS
    esac

    ((ARGS_IX++))
    [[ \$ARGS_IX -gt \$# ]] && die 'too many attempts to parse arguments'
  done

$REQUIRED_CHECKS

  REMAINDER=(\"\$@\")

  return \$ERR
}
"

  is_executable shfmt && EVAL_STRING="$(echo "$EVAL_STRING" | shfmt -s -i 2 -bn -ci -sr)"
  debug "$EVAL_STRING"
  printf '%s' "$EVAL_STRING"
}
